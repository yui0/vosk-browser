diff -Nuarp kaldi.orig/src/Makefile kaldi/src/Makefile
--- kaldi.orig/src/Makefile	2024-10-27 15:31:50.099818841 +0900
+++ kaldi/src/Makefile	2024-10-27 15:32:37.264878169 +0900
@@ -42,7 +42,7 @@ KALDI_SONAME ?= libkaldi.so
 # Reset the default goal, so that the all target will become default
 .DEFAULT_GOAL :=
 .PHONY: all mklibdir rmlibdir checkversion
-all: $(SUBDIRS) matrix/test
+all: $(SUBDIRS) #matrix/test
 	@echo Done
 
 ifneq ($(KALDILIBDIR), )
diff -Nuarp kaldi.orig/src/configure kaldi/src/configure
--- kaldi.orig/src/configure	2024-10-27 15:31:50.107818509 +0900
+++ kaldi/src/configure	2024-10-27 15:32:05.905163979 +0900
@@ -1031,6 +1031,34 @@ if $android ; then
 
   echo "Successfully configured for Android with OpenBLAS from $OPENBLASROOT."
 
+elif [ "$(basename $CC)" == "emcc" ]; then
+  # emscripten (WebAssembly)
+
+  if [ -z "$CLAPACKROOT" ]; then
+    failure "Must specify the location of CLAPACK with --clapack-root option (and it must exist)"
+  fi
+  if [ ! -f ../tools/CLAPACK/clapack.h ]; then
+    failure "could not find file ../tools/CLAPACK/clapack.h"
+  fi
+  if [ ! -d "$CLAPACKROOT" ]; then
+    failure "The directory $CLAPACKROOT does not exist"
+  fi
+
+  for lib in F2CLIBS/libf2c.bc lapack_WA.bc libcblaswr.bc; do
+    CLAPACKLIBS="$CLAPACKLIBS $CLAPACKROOT/$lib"
+  done
+
+  echo "CLAPACKLIBS = $CLAPACKLIBS" >> kaldi.mk
+
+  # Also check for cblas.h and f2c.h
+  echo "Using CLAPACK libs from $CLAPACKROOT as the linear algebra library."
+  if [ ! -f makefiles/wasm_clapack.mk ]; then
+    failure "makefiles/wasm_clapack.mk not found."
+  fi
+  cat makefiles/wasm_clapack.mk >> kaldi.mk
+  echo "Warning (CLAPACK): this part of the configure process is not properly tested and may not work."
+  echo "Successfully configured for WebAssembly with CLAPACK libs from $CLAPACKROOT"
+
 elif [ "`uname`" == "Darwin" ]; then
   # Check for Darwin first, because we later call uname -o (for Cygwin)
   # which crashes on Darwin.
diff -Nuarp kaldi.orig/src/ivector/ivector-extractor.cc kaldi/src/ivector/ivector-extractor.cc
--- kaldi.orig/src/ivector/ivector-extractor.cc	2024-10-27 15:31:50.148816804 +0900
+++ kaldi/src/ivector/ivector-extractor.cc	2024-10-27 15:32:05.905163979 +0900
@@ -190,16 +190,10 @@ void IvectorExtractor::ComputeDerivedVar
   U_.Resize(NumGauss(), IvectorDim() * (IvectorDim() + 1) / 2);
   Sigma_inv_M_.resize(NumGauss());
 
-  // Note, we could have used RunMultiThreaded for this and similar tasks we
-  // have here, but we found that we don't get as complete CPU utilization as we
-  // could because some tasks finish before others.
-  {
-    TaskSequencerConfig sequencer_opts;
-    sequencer_opts.num_threads = g_num_threads;
-    TaskSequencer<IvectorExtractorComputeDerivedVarsClass> sequencer(
-        sequencer_opts);
-    for (int32 i = 0; i < NumGauss(); i++)
-      sequencer.Run(new IvectorExtractorComputeDerivedVarsClass(this, i));
+  for (int32 i = 0; i < NumGauss(); i++) {
+    IvectorExtractorComputeDerivedVarsClass *t = new IvectorExtractorComputeDerivedVarsClass(this, i);
+    (*t)();
+    delete t;
   }
   KALDI_LOG << "Done.";
 }
diff -Nuarp kaldi.orig/src/makefiles/default_rules.mk kaldi/src/makefiles/default_rules.mk
--- kaldi.orig/src/makefiles/default_rules.mk	2024-10-27 15:31:50.158816389 +0900
+++ kaldi/src/makefiles/default_rules.mk	2024-10-27 15:32:05.905163979 +0900
@@ -1,5 +1,9 @@
 SHELL := /bin/bash
 
+ifeq ($(notdir ${CC}), emcc)
+  IS_EMSCRIPTEN = true
+endif
+
 ifeq ($(KALDI_FLAVOR), dynamic)
   ifeq ($(shell uname), Darwin)
     ifdef ANDROIDINC # cross-compiling enabled on host MacOS
@@ -31,6 +35,11 @@ ifeq ($(KALDI_FLAVOR), dynamic)
     $(error Dynamic libraries not supported on this platform. Run configure with --static flag.)
   endif
   XDEPENDS =
+else ifdef IS_EMSCRIPTEN
+  ifdef LIBNAME
+    LIBFILE = $(LIBNAME).bc
+  endif
+  XDEPENDS = $(foreach dep,$(ADDLIBS), $(dir $(dep))$(notdir $(basename $(dep))).bc)
 else
   ifdef LIBNAME
     LIBFILE = $(LIBNAME).a
@@ -38,14 +47,22 @@ else
   XDEPENDS = $(ADDLIBS)
 endif
 
-all: $(LIBFILE) $(BINFILES)
-
+ifdef IS_EMSCRIPTEN
+  all: $(LIBFILE)
+else
+  all: $(LIBFILE) $(BINFILES)
+endif
 
 ifdef LIBNAME
 
-$(LIBNAME).a: $(OBJFILES)
+ifdef IS_EMSCRIPTEN
+  $(LIBNAME).bc: $(OBJFILES)
+	$(CXX) -o $(LIBNAME).bc $(OBJFILES)
+else
+  $(LIBNAME).a: $(OBJFILES)
 	$(AR) -cr $(LIBNAME).a $(OBJFILES)
 	$(RANLIB) $(LIBNAME).a
+endif
 
 ifeq ($(KALDI_FLAVOR), dynamic)
 # the LIBFILE is not the same as $(LIBNAME).a
@@ -91,11 +108,14 @@ endif
 %.a:
 	$(MAKE) -C ${@D} ${@F}
 
+%.bc:
+	$(MAKE) -C ${@D} ${@F}
+
 %.so:
 	$(MAKE) -C ${@D} ${@F}
 
 clean:
-	-rm -f *.o *.a *.so *.dylib $(OBJFILES) $(TESTFILES) $(BINFILES) $(TESTOUTPUTS) tmp* *.tmp *.testlog
+	-rm -f *.o *.a *.bc *.so *.dylib $(OBJFILES) $(TESTFILES) $(BINFILES) $(TESTOUTPUTS) tmp* *.tmp *.testlog
 
 distclean: clean
 	-rm -f .depend.mk
diff -Nuarp kaldi.orig/src/makefiles/wasm_clapack.mk kaldi/src/makefiles/wasm_clapack.mk
--- kaldi.orig/src/makefiles/wasm_clapack.mk	1970-01-01 09:00:00.000000000 +0900
+++ kaldi/src/makefiles/wasm_clapack.mk	2024-10-27 15:32:05.905163979 +0900
@@ -0,0 +1,32 @@
+# WebAssembly/CLAPACK configuration
+
+ifndef DOUBLE_PRECISION
+  $(error DOUBLE_PRECISION not defined.)
+endif
+ifndef OPENFSTINC
+  $(error OPENFSTINC not defined.)
+endif
+ifndef OPENFSTLIBS
+  $(error OPENFSTLIBS not defined.)
+endif
+
+CXXFLAGS = -std=c++17 -I.. -I$(OPENFSTINC) $(EXTRA_CXXFLAGS) \
+           -Wall -Wno-sign-compare -Wno-unused-local-typedefs \
+           -Wno-deprecated-declarations -Winit-self \
+           -DKALDI_DOUBLEPRECISION=$(DOUBLE_PRECISION) \
+           -DHAVE_CXXABI_H -DHAVE_CLAPACK -I../../tools/CLAPACK \
+           -g # -DKALDI_PARANOID
+
+ifeq ($(KALDI_FLAVOR), dynamic)
+CXXFLAGS += -fPIC
+endif
+
+# Compiler specific flags
+COMPILER = $(shell $(CXX) -v 2>&1)
+ifeq ($(findstring clang,$(COMPILER)),clang)
+# Suppress annoying clang warnings that are perfectly valid per spec.
+CXXFLAGS += -Wno-mismatched-tags
+endif
+
+LDFLAGS = $(EXTRA_LDFLAGS) $(OPENFSTLDFLAGS) -g
+LDLIBS = $(EXTRA_LDLIBS) $(OPENFSTLIBS) $(CLAPACKLIBS) -lm # -lpthread -ldl
diff -Nuarp kaldi.orig/tools/Makefile kaldi/tools/Makefile
--- kaldi.orig/tools/Makefile	2024-10-27 15:31:50.203814518 +0900
+++ kaldi/tools/Makefile	2024-10-27 15:32:05.905163979 +0900
@@ -78,11 +78,12 @@ else ifeq ($(OS),Windows_NT)
   # This new OS path is confirmed working on Windows 10 / Cygwin64.
   openfst_add_CXXFLAGS = -g -O2 -Wa,-mbig-obj
 else
-  openfst_add_CXXFLAGS = -g -O3 -msse -msse2
+  openfst_add_CXXFLAGS = -g -O2
 endif
 
 openfst-$(OPENFST_VERSION)/Makefile: openfst-$(OPENFST_VERSION)
 	cd openfst-$(OPENFST_VERSION)/ && \
+		git apply -v ../openfst.patch && \
         autoreconf -i && \
 	./configure --prefix=`pwd` $(OPENFST_CONFIGURE) CXX="$(CXX)" \
 		CXXFLAGS="$(openfst_add_CXXFLAGS) $(CXXFLAGS)" \
diff -Nuarp kaldi.orig/tools/extras/check_dependencies.sh kaldi/tools/extras/check_dependencies.sh
--- kaldi.orig/tools/extras/check_dependencies.sh	2024-10-27 15:31:50.203814518 +0900
+++ kaldi/tools/extras/check_dependencies.sh	2024-10-27 15:32:05.905163979 +0900
@@ -59,12 +59,6 @@ case $compiler_ver_info in
     ;;
 esac
 
-# Cannot check this without a compiler.
-if have "$CXX" && ! echo "#include <zlib.h>" | $CXX $CXXFLAGS -E - &>/dev/null; then
-  echo "$0: zlib is not installed."
-  add_packages zlib-devel zlib1g-dev
-fi
-
 for f in make automake autoconf patch grep bzip2 gzip unzip wget git sox; do
   if ! have $f; then
     echo "$0: $f is not installed."
diff -Nuarp kaldi.orig/tools/openfst.patch kaldi/tools/openfst.patch
--- kaldi.orig/tools/openfst.patch	1970-01-01 09:00:00.000000000 +0900
+++ kaldi/tools/openfst.patch	2024-10-27 15:32:05.905163979 +0900
@@ -0,0 +1,45 @@
+diff --git a/configure.ac b/configure.ac
+index 9ab8824..94ff482 100644
+--- a/configure.ac
++++ b/configure.ac
+@@ -149,40 +149,6 @@ AC_ARG_WITH([libfstdir],
+ 
+ AC_SUBST([libfstdir], $with_libfstdir)
+ 
+-# Flags may be changed after configuring, so this is checked again by
+-# weight_test.cc.  The check here is to save time in the common case,
+-# or when someone does not run `make check`.
+-AC_RUN_IFELSE([AC_LANG_PROGRAM([
+-                 #include <cstdio>
+-
+-                 template <typename T>
+-                 bool FloatEqIsReflexive(T m) {
+-                   volatile T x = 1.111;
+-                   x *= m;
+-
+-                   T y = 1.111;
+-                   y *= m;
+-
+-                   return x == y;
+-                 }
+-               ], [
+-                 volatile double test_value = 1.1;
+-                 if (!FloatEqIsReflexive(static_cast<float>(test_value))) {
+-                   printf("float FAIL\n");
+-                   return 1;
+-                 }
+-                 if (!FloatEqIsReflexive(test_value)) {
+-                   printf("double FAIL\n");
+-                   return 1;
+-                 }
+-               ])],
+-              [echo "Float equality is good"],
+-              [AC_MSG_FAILURE(m4_normalize([
+-                   Test float equality failed!
+-                   Compile with -msse -mfpmath=sse if using g++.
+-              ]))],
+-              [echo "Ignoring test for cross-compilation"])
+-
+ AC_CHECK_LIB([dl], dlopen, [DL_LIBS=-ldl])
+ AC_SUBST([DL_LIBS])
+ 
